# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation .

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Copy artifact to staging directory
      run: mkdir staging && cp target/*.jar staging

    - name: Build and analyze
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=sun-java-project -Dsonar.projectName='sun-java-project'

    - name: Create Artifact
      run: |
          mkdir -p artifact  # Create the artifact directory
          echo "This is a sample artifact file" > artifact/sample.txt  # Example content to include in the artifact
          ls -al artifact  # List the contents of the artifact directory to verify

  
    - name: Publish Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Package
        path: artifact/*  # The directory containing files to upload
        

  deploy:
    runs-on: self-hosted  # Run on your self-hosted runner
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: Package
          path: ./downloaded-artifacts

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/my-key.pem
          chmod 600 ~/.ssh/my-key.pem  # Set appropriate permissions for the private key

      - name: Ensure target directory exists on EC2
        run: |
          ssh -i ~/.ssh/my-key.pem ubuntu@13.233.97.90 << 'EOF'
            # Ensure /home/ubuntu/app directory exists
            sudo mkdir -p /home/ubuntu/app
            sudo chown ubuntu:ubuntu /home/ubuntu/app  # Give ownership to the ubuntu user
            # Ensure it has the correct permissions
            sudo chmod 755 /home/ubuntu/app
          EOF

      - name: Deploy code to EC2
        run: |
          # Copy the artifact to EC2 instance using scp with the private key
          scp -i ~/.ssh/my-key.pem -r * ubuntu@52.66.196.5:/home/ubuntu/app

          # SSH into the EC2 instance to install dependencies and start the app
          ssh -i ~/.ssh/my-key.pem ubuntu@52.66.196.5 << 'EOF'
            cd /home/ubuntu/app
            # Install dependencies if not already installed
            python -m pip install --upgrade pip
            pip install pytest
            # Start the Python app (adjust the command as needed)
            nohup python code/addition.py &
            echo "Application started."
          EOF
