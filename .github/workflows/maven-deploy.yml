# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation .

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Copy artifact to staging directory
      run: mkdir staging && cp target/*.jar staging

    - name: Build and analyze
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=sun-java-project -Dsonar.projectName='sun-java-project'

    - name: Create Artifact
      run: |
          mkdir -p artifact  # Create the artifact directory
          echo "This is a sample artifact file" > artifact/sample.txt  # Example content to include in the artifact
          ls -al artifact  # List the contents of the artifact directory to verify

      # Step to upload the artifact
    - name: Publish Artifacts    
      uses: actions/upload-artifact@v4
      with:
          name: Package  # The name of the artifact you want to upload
          path: artifact  # The directory that contains the files you want to upload

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
    
      
    - name: Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: Package
        path: ./downloaded-artifacts

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Set up SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}  # Add your private key in GitHub secrets
